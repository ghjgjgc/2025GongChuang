/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "dma.h"
#include "i2c.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "Motor_CARBASE.h"
#include "ROBOTIC_Arm.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
uint8_t DEBUG_USART[]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
const Color Color_Order[3]={Blue,Green,Red};//Color_Order
Color Mission_Order[6]={Green,Red,Blue,Blue,Green,Red};
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void Raw_Material(void);
void Rough_processing(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_TIM2_Init();
  MX_TIM3_Init();
  MX_TIM4_Init();
  MX_TIM5_Init();
  MX_TIM10_Init();
  MX_TIM1_Init();
  MX_UART4_Init();
  MX_UART5_Init();
  MX_USART1_UART_Init();
  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */

  int8_t Mission_Select=-1;

  LED_ONOFF(LED_ALL,1);
  HAL_Delay(2000);
  LED_ONOFF(LED_ALL,0);
  ROBOTICArm_initialize();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		switch (Mission_Select)
		{
			case -1:
        LED_ONOFF(LED3,1);
  
//        CarMove_TO_Global(0,5000,Car_Posture_Up,VOID_FUNCTION);
         while (1)
         {
//           Send_Number(angle,55);
//           Gyroscopes_ARRAY_Handle();
           HAL_UART_Transmit(&huart4,(const uint8_t*)Gyroscopes_ARRAY,11,0xFF);
           HAL_Delay(500);
					 LED_ONOFF(LED_ALL,0);
         }
        
        // CarMove_TO_Global(180,1700,Car_Posture_Right,VOID_FUNCTION);

        // CarMove_TO_Global(180,1300,Car_Posture_Right,VOID_FUNCTION);
        // CarMove_TO_Global(2100,1050,Car_Posture_Down,VOID_FUNCTION);

        // CarMove_TO_Global(2100,1800,Car_Posture_Down,VOID_FUNCTION);
        // CarMove_TO_Global(980,1800,Car_Posture_Left,VOID_FUNCTION);

        // CarMove_TO_Global(200,1800,Car_Posture_Left,VOID_FUNCTION);
        // CarMove_TO_Global(200,1500,Car_Posture_Right,VOID_FUNCTION);
        // CarMove_TO_Global(200,580,Car_Posture_Up,VOID_FUNCTION);
        // ROBOTICArm_DirectlyMove(Green_Warehouse.XPosition,Green_Warehouse.YPosition,Green_Warehouse.ZPosition+80,Claw_Clawing,1000,1);
        // Raw_Material();
        LED_ONOFF(LED3,0);
        Mission_Select=-2;
        break;
			case 0://Start and scanning QR code
        CarMove_TO_Global(200,580,Car_Posture_Up,VOID_FUNCTION);
        LED_ONOFF(LED1,1);
        while(rk3588_Arry[1]==0x67)
				{
          HAL_Delay(10);
				}
        HAL_Delay(200);
        LED_ONOFF(LED1,0);
        for (uint8_t i = 0; i < 6; i++)
        {
          Mission_Order[i]=rk3588_Arry[i+2];
        }
        //OLED_SHOW()
				// while(rk3588_Arry[1]==0x01){LED_ONOFF(LED2,1);HAL_Delay(1000); LED_ONOFF(LED2,0);HAL_Delay(1000);
				Mission_Select=1;
				break;
			case 1://Raw_Material
        Final_PoseSet(Raw_Material_Scanning.XPosition,Raw_Material_Scanning.YPosition,Raw_Material_Scanning.ZPosition,Claw_Release);
        CarMove_TO_Global(180,1460,Car_Posture_Right,ROBOTICArm_linearInterpolationAlgorithm);
				Raw_Material();
				Mission_Select=2;
				break;
      case 2://Rough processing area
        CarMove_TO_Global(2100,1050,Car_Posture_Down,ROBOTICArm_linearInterpolationAlgorithm);
        Rough_processing();
        Mission_Select=3;
        break;
			default:
				break;
		}
  }
  
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
/*Go to the QR code and raw material area.*/
void Raw_Material(void)
{
  static uint8_t Raw_Material_CNT=0;
  uint8_t Forward_Color=Blue;
  uint8_t Forward_ColorNum=0,Mission_ColorNum=0;
  ROBOTICArm_DirectlyMove(Raw_Material_Scanning.XPosition,Raw_Material_Scanning.YPosition,Raw_Material_Scanning.ZPosition,Claw_ReleaseFull,700,500);
  //Error compensation before clamping
  if(Raw_Material_CNT==0)
  {
   Error_compensation(Raw_Material_Compensation);
  }
  //Three times clamping
  rk3588_Arry[6]=0x00;
  Variable_Flag Claw_=No;
  for (int8_t n = 0; n < 3;)
  {
    ROBOTICArm_DirectlyMove(Raw_Material_Scanning.XPosition,Raw_Material_Scanning.YPosition,Raw_Material_Scanning.ZPosition,Claw_ReleaseFull,700,500);
    //Send task and wait for feedback
    Forward_Color=7;
    Send_MissionPack(Raw_Material_Mission,Mission_Order[n+Raw_Material_CNT*3]);
    while (rk3588_Arry[6]!=0x03){LED_ONOFF(LED2,1);}LED_ONOFF(LED2,0);
    HAL_Delay(10);
    Forward_Color=rk3588_Arry[7];
    rk3588_Arry[6]=0x00;
    //Analysis sequence
    if(Mission_Order[n+Raw_Material_CNT*3]==Forward_Color)
    {
      
      ROBOTICArm_DirectlyMove(Raw_Material_ClawFront.XPosition+10,Raw_Material_ClawFront.YPosition,Raw_Material_ClawFront.ZPosition,Claw_ReleaseFull,200,200);
      ROBOTICArm_DirectlyMove(Raw_Material_ClawFront.XPosition,Raw_Material_ClawFront.YPosition,Raw_Material_ClawFront.ZPosition,Claw_Clawing,100,100);
      ROBOTICArm_DirectlyMove(Raw_Material_ClawFront.XPosition,Raw_Material_ClawFront.YPosition,Raw_Material_ClawFront.ZPosition+100,Claw_Clawing,200,1);
      Claw_=Yes;
    }
    else 
    {
      //Obtain the order of the front color and target color positions
      for (uint8_t i = 0; i < 3; i++)
      {
        if(Color_Order[i]==Forward_Color)
        {
          Forward_ColorNum=i;break;
        }
      }
      for (uint8_t i = 0; i < 3; i++)
      {
        if(Color_Order[i]==Mission_Order[n+Raw_Material_CNT*3])
        {
          Mission_ColorNum=i;break;
        }
      }
      //Analyze whether it is adjacent or other
      int8_t Delta_Num=((int8_t)Forward_ColorNum-(int8_t)Mission_ColorNum);
      if(abs(Delta_Num)==2)
      {
        if(Delta_Num>0)
        {
          #if Rotation_direction==1||Rotation_direction==0
          ROBOTICArm_DirectlyMove(Raw_Material_ClawRight.XPosition+50,Raw_Material_ClawRight.YPosition,Raw_Material_ClawRight.ZPosition,Claw_ReleaseFull,300,50);
          ROBOTICArm_DirectlyMove(Raw_Material_ClawRight.XPosition,Raw_Material_ClawRight.YPosition,Raw_Material_ClawRight.ZPosition,Claw_Clawing,200,200);
          ROBOTICArm_DirectlyMove(Raw_Material_ClawRight.XPosition,Raw_Material_ClawRight.YPosition,Raw_Material_ClawRight.ZPosition+150,Claw_Clawing,300,1);
          Claw_=Yes;
          #endif
        }
        else
        {
          #if Rotation_direction==-1||Rotation_direction==0
          ROBOTICArm_DirectlyMove(Raw_Material_ClawLeft.XPosition+50,Raw_Material_ClawLeft.YPosition,Raw_Material_ClawLeft.ZPosition,Claw_ReleaseFull,300,50);
          ROBOTICArm_DirectlyMove(Raw_Material_ClawLeft.XPosition,Raw_Material_ClawLeft.YPosition,Raw_Material_ClawLeft.ZPosition,Claw_Clawing,200,200);
          ROBOTICArm_DirectlyMove(Raw_Material_ClawLeft.XPosition,Raw_Material_ClawLeft.YPosition,Raw_Material_ClawLeft.ZPosition+150,Claw_Clawing,300,1);
          Claw_=Yes;
          #endif
        }
      }
      else 
      {
        if(Delta_Num>0)
        {
          #if Rotation_direction==-1||Rotation_direction==0
          ROBOTICArm_DirectlyMove(Raw_Material_ClawLeft.XPosition+50,Raw_Material_ClawLeft.YPosition,Raw_Material_ClawLeft.ZPosition,Claw_ReleaseFull,300,50);
          ROBOTICArm_DirectlyMove(Raw_Material_ClawLeft.XPosition,Raw_Material_ClawLeft.YPosition,Raw_Material_ClawLeft.ZPosition,Claw_Clawing,200,200);
          ROBOTICArm_DirectlyMove(Raw_Material_ClawLeft.XPosition,Raw_Material_ClawLeft.YPosition,Raw_Material_ClawLeft.ZPosition+150,Claw_Clawing,300,1);
          Claw_=Yes;
          #endif
        }
        else
        {
          #if Rotation_direction==1||Rotation_direction==0
          ROBOTICArm_DirectlyMove(Raw_Material_ClawRight.XPosition+50,Raw_Material_ClawRight.YPosition,Raw_Material_ClawRight.ZPosition,Claw_ReleaseFull,300,50);
          ROBOTICArm_DirectlyMove(Raw_Material_ClawRight.XPosition,Raw_Material_ClawRight.YPosition,Raw_Material_ClawRight.ZPosition,Claw_Clawing,200,200);
          ROBOTICArm_DirectlyMove(Raw_Material_ClawRight.XPosition,Raw_Material_ClawRight.YPosition,Raw_Material_ClawRight.ZPosition+150,Claw_Clawing,200,1);
          Claw_=Yes;
          #endif
        }
      }
    }
    //Store in warehouse
    if(Claw_==Yes)
    {
      Claw_=No;
      ROBOTICArm_DirectlyMove(Relay_point.XPosition,Relay_point.YPosition,Relay_point.ZPosition,Claw_Clawing,400,1);
      switch (Mission_Order[n+Raw_Material_CNT*3])
      {
      case Red:
        ROBOTICArm_DirectlyMove(Red_Warehouse.XPosition,Red_Warehouse.YPosition,Red_Warehouse.ZPosition+90,Claw_Clawing,900,1);
        ROBOTICArm_DirectlyMove(Red_Warehouse.XPosition,Red_Warehouse.YPosition,Red_Warehouse.ZPosition,Claw_Release,200,300);
        ROBOTICArm_DirectlyMove(Red_Warehouse.XPosition,Red_Warehouse.YPosition,Red_Warehouse.ZPosition+50,Claw_Release,100,1);
        break;
      case Green:
        ROBOTICArm_DirectlyMove(Green_Warehouse.XPosition,Green_Warehouse.YPosition,Green_Warehouse.ZPosition+80,Claw_Clawing,700,1);
        ROBOTICArm_DirectlyMove(Green_Warehouse.XPosition,Green_Warehouse.YPosition,Green_Warehouse.ZPosition,Claw_Release,200,300);
        ROBOTICArm_DirectlyMove(Green_Warehouse.XPosition,Green_Warehouse.YPosition,Green_Warehouse.ZPosition+50,Claw_Release,100,1);
        break;
      case Blue:
        ROBOTICArm_DirectlyMove(Blue_Warehouse.XPosition,Blue_Warehouse.YPosition,Blue_Warehouse.ZPosition+90,Claw_Clawing,700,1);
        ROBOTICArm_DirectlyMove(Blue_Warehouse.XPosition,Blue_Warehouse.YPosition,Blue_Warehouse.ZPosition,Claw_Release,200,500);
        ROBOTICArm_DirectlyMove(Blue_Warehouse.XPosition,Blue_Warehouse.YPosition,Blue_Warehouse.ZPosition+50,Claw_Release,100,1);
        break;
      default:
        break;
      }
      n++;
    }
  }
  Raw_Material_CNT++;
  Send_MissionPack(9,1);
}
void Rough_processing(void)
{
  static uint8_t Rough_processing_CNT=0;
  if(Rough_processing_CNT==0)
  {
    Error_compensation(Angle_compensation);
    Rough_processing_CNT++;
  }
  Error_compensation(UnStacking_Correction);
  uint8_t n = 0;
  for (; n < 3;)
  {
    switch (Mission_Order[n+Rough_processing_CNT*3])
    {
    case Red:
      //Claw from WareHouse
      ROBOTICArm_DirectlyMove(Red_Warehouse.XPosition,Red_Warehouse.YPosition,Red_Warehouse.ZPosition+50,Claw_Clawing,1000,1);
      ROBOTICArm_DirectlyMove(Red_Warehouse.XPosition,Red_Warehouse.YPosition,Red_Warehouse.ZPosition,Claw_Release,200,300);
      ROBOTICArm_DirectlyMove(Red_Warehouse.XPosition,Red_Warehouse.YPosition,Red_Warehouse.ZPosition+50,Claw_Release,100,1);
      //Goto Midpoint
      ROBOTICArm_DirectlyMove(Relay_point.XPosition,Relay_point.YPosition,Relay_point.ZPosition,Claw_ReleaseFull,700,500);
      //Goto PacePoint
      ROBOTICArm_DirectlyMove(Red_PlacementLocation_Unstack.XPosition,Red_PlacementLocation_Unstack.YPosition,Red_PlacementLocation_Unstack.ZPosition+100,Claw_ReleaseFull,700,500);
      while(ROBOTICArm_linearInterpolationAlgorithm(Red_PlacementLocation_Unstack.XPosition,Red_PlacementLocation_Unstack.YPosition,Red_PlacementLocation_Unstack.ZPosition,Claw_ReleaseFull,700,500)!=HAL_OK);
      break;
    case Green:\
      //Claw from WareHouse
      ROBOTICArm_DirectlyMove(Green_Warehouse.XPosition,Green_Warehouse.YPosition,Green_Warehouse.ZPosition+50,Claw_Clawing,800,1);
      ROBOTICArm_DirectlyMove(Green_Warehouse.XPosition,Green_Warehouse.YPosition,Green_Warehouse.ZPosition,Claw_Release,200,300);
      ROBOTICArm_DirectlyMove(Green_Warehouse.XPosition,Green_Warehouse.YPosition,Green_Warehouse.ZPosition+50,Claw_Release,100,1);
      //Goto Midpoint
      ROBOTICArm_DirectlyMove(Relay_point.XPosition,Relay_point.YPosition,Relay_point.ZPosition,Claw_ReleaseFull,700,500);
      //Goto PacePoint
      ROBOTICArm_DirectlyMove(Green_PlacementLocation_Unstack.XPosition,Green_PlacementLocation_Unstack.YPosition,Green_PlacementLocation_Unstack.ZPosition+100,Claw_ReleaseFull,700,500);
      while(ROBOTICArm_linearInterpolationAlgorithm(Green_PlacementLocation_Unstack.XPosition,Green_PlacementLocation_Unstack.YPosition,Green_PlacementLocation_Unstack.ZPosition,Claw_ReleaseFull,700,500)!=HAL_OK);
      break;
    case Blue:
      //Claw from WareHouse
      ROBOTICArm_DirectlyMove(Blue_Warehouse.XPosition,Blue_Warehouse.YPosition,Blue_Warehouse.ZPosition+50,Claw_Clawing,800,1);
      ROBOTICArm_DirectlyMove(Blue_Warehouse.XPosition,Blue_Warehouse.YPosition,Blue_Warehouse.ZPosition,Claw_Release,200,500);
      ROBOTICArm_DirectlyMove(Blue_Warehouse.XPosition,Blue_Warehouse.YPosition,Blue_Warehouse.ZPosition+50,Claw_Release,100,1);
      //Goto Midpoint
      ROBOTICArm_DirectlyMove(Relay_point.XPosition,Relay_point.YPosition,Relay_point.ZPosition,Claw_ReleaseFull,700,500);
      //Goto PacePoint
      ROBOTICArm_DirectlyMove(Blue_PlacementLocation_Unstack.XPosition,Blue_PlacementLocation_Unstack.YPosition,Blue_PlacementLocation_Unstack.ZPosition+100,Claw_ReleaseFull,700,500);
      while(ROBOTICArm_linearInterpolationAlgorithm(Blue_PlacementLocation_Unstack.XPosition,Blue_PlacementLocation_Unstack.YPosition,Blue_PlacementLocation_Unstack.ZPosition,Claw_ReleaseFull,700,500)!=HAL_OK);
      break;
    default:
      break;
    }
    //Goto Midpoint
    ROBOTICArm_DirectlyMove(Relay_point.XPosition,Relay_point.YPosition,Relay_point.ZPosition,Claw_ReleaseFull,700,500);
    n++;
  }
  n=0;
  for (; n < 3;)
  {
    switch (Mission_Order[n+Rough_processing_CNT*3])
    {
    case Red:
      //Claw from PacePoint
      ROBOTICArm_DirectlyMove(Red_PlacementLocation_Unstack.XPosition,Red_PlacementLocation_Unstack.YPosition,Red_PlacementLocation_Unstack.ZPosition+100,Claw_ReleaseFull,700,500);
      ROBOTICArm_DirectlyMove(Red_PlacementLocation_Unstack.XPosition,Red_PlacementLocation_Unstack.YPosition,Red_PlacementLocation_Unstack.ZPosition,Claw_ReleaseFull,700,500);
      //Goto Midpoint
      ROBOTICArm_DirectlyMove(Relay_point.XPosition,Relay_point.YPosition,Relay_point.ZPosition,Claw_ReleaseFull,700,500);
      //Goto WareHouse
      ROBOTICArm_DirectlyMove(Red_Warehouse.XPosition,Red_Warehouse.YPosition,Red_Warehouse.ZPosition+50,Claw_Clawing,1000,1);
      ROBOTICArm_DirectlyMove(Red_Warehouse.XPosition,Red_Warehouse.YPosition,Red_Warehouse.ZPosition,Claw_Release,200,300);
      ROBOTICArm_DirectlyMove(Red_Warehouse.XPosition,Red_Warehouse.YPosition,Red_Warehouse.ZPosition+50,Claw_Release,100,1);
      break;
    case Green:
      //Claw from WareHouse
      ROBOTICArm_DirectlyMove(Green_PlacementLocation_Unstack.XPosition,Green_PlacementLocation_Unstack.YPosition,Green_PlacementLocation_Unstack.ZPosition+100,Claw_ReleaseFull,700,500);
      ROBOTICArm_DirectlyMove(Green_PlacementLocation_Unstack.XPosition,Green_PlacementLocation_Unstack.YPosition,Green_PlacementLocation_Unstack.ZPosition,Claw_ReleaseFull,700,500);
      //Goto Midpoint
      ROBOTICArm_DirectlyMove(Relay_point.XPosition,Relay_point.YPosition,Relay_point.ZPosition,Claw_ReleaseFull,700,500);
      //Goto PacePoint
      ROBOTICArm_DirectlyMove(Green_Warehouse.XPosition,Green_Warehouse.YPosition,Green_Warehouse.ZPosition+50,Claw_Clawing,800,1);
      ROBOTICArm_DirectlyMove(Green_Warehouse.XPosition,Green_Warehouse.YPosition,Green_Warehouse.ZPosition,Claw_Release,200,300);
      ROBOTICArm_DirectlyMove(Green_Warehouse.XPosition,Green_Warehouse.YPosition,Green_Warehouse.ZPosition+50,Claw_Release,100,1);
      break;
    case Blue:
      //Claw from WareHouse
      ROBOTICArm_DirectlyMove(Blue_PlacementLocation_Unstack.XPosition,Blue_PlacementLocation_Unstack.YPosition,Blue_PlacementLocation_Unstack.ZPosition+100,Claw_ReleaseFull,700,500);
      ROBOTICArm_DirectlyMove(Blue_PlacementLocation_Unstack.XPosition,Blue_PlacementLocation_Unstack.YPosition,Blue_PlacementLocation_Unstack.ZPosition,Claw_ReleaseFull,700,500);
      //Goto Midpoint
      ROBOTICArm_DirectlyMove(Relay_point.XPosition,Relay_point.YPosition,Relay_point.ZPosition,Claw_ReleaseFull,700,500);
      //Goto PacePoint
      ROBOTICArm_DirectlyMove(Blue_Warehouse.XPosition,Blue_Warehouse.YPosition,Blue_Warehouse.ZPosition+50,Claw_Clawing,800,1);
      ROBOTICArm_DirectlyMove(Blue_Warehouse.XPosition,Blue_Warehouse.YPosition,Blue_Warehouse.ZPosition,Claw_Release,200,500);
      ROBOTICArm_DirectlyMove(Blue_Warehouse.XPosition,Blue_Warehouse.YPosition,Blue_Warehouse.ZPosition+50,Claw_Release,100,1);
      break;
    default:
      break;
    }
    //Goto Midpoint
    ROBOTICArm_DirectlyMove(Relay_point.XPosition,Relay_point.YPosition,Relay_point.ZPosition,Claw_ReleaseFull,700,500);
    n++;
  }
}
void Temporary_storage(void)
{
  static uint8_t Temporary_storage_CNT = 0;
  if(Temporary_storage_CNT==0)
  {
    
  }
}
/**
 * @brief LED switch
 * 
 * @param LED LEDNUM
 * @param ON_OFF ON?
 */
void LED_ONOFF(LED_Num LED,uint8_t ON_OFF)
{
  switch (LED)
  {
  case LED1:
    if (ON_OFF==1)
    {
      HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
    }
    else HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
    break;
  case LED2:
    if (ON_OFF==1)
    {
      HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);
    }
    else HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);
    break;
  case LED3:
    if (ON_OFF==1)
    {
      HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,GPIO_PIN_RESET);
    }
    else HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,GPIO_PIN_SET);
    break;
  case LED4:
    if (ON_OFF==1)
    {
      HAL_GPIO_WritePin(GPIOE,GPIO_PIN_15,GPIO_PIN_RESET);
    }
    else HAL_GPIO_WritePin(GPIOE,GPIO_PIN_15,GPIO_PIN_SET);
    break;
  case LED_ALL:
     if (ON_OFF==1)
    {
      HAL_GPIO_WritePin(GPIOE,GPIO_PIN_15,GPIO_PIN_RESET);
      HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);
      HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
      HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,GPIO_PIN_RESET);
    }
    else{ HAL_GPIO_WritePin(GPIOE,GPIO_PIN_15,GPIO_PIN_SET);
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);
     HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,GPIO_PIN_SET);
     HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
    }
  default:
    break;
  }
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  uint8_t ERROR_Positon[]={*file,line};
  HAL_UART_Transmit(&huart4,(const uint8_t*)ERROR_Positon,2,0xff);
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
